** Image segmentation and export to GIS                              :slides:
*** Goals and data
**** Goals
     - Know steps to perform image segmentation with OTB
     - Know how to optimize segmentation parameters
     - Export segmentation results to a GIS

**** Data
     Dataset for this exercise can be found in folder: ~Data/segmentation~.

*** Planning
    Planning of the practical work:
    1. Image smoothing with the MeanShift algorithm
    2. Segmentation
    3. Handle small regions
    4. Vectorization
    5. Filter segments in QGIS

*** MeanShift algorithm (1/4)
    #+ATTR_LATEX: :float t :width 0.4\textwidth
    [[file:Images/principe_mean_shift_1.pdf]]
    #+BEGIN_CENTER
    Search in pixel neighborhood /nearby/ spectrally
    #+END_CENTER

*** MeanShift algorithm (2/4)
    #+ATTR_LATEX: :float t :width 0.4\textwidth
    [[file:Images/principe_mean_shift_2.pdf]]
    #+BEGIN_CENTER
    Spatial and spectral mean for pixels in the given window
    #+END_CENTER

*** MeanShift algorithm (3/4)
    #+ATTR_LATEX: :float t :width 0.4\textwidth
    [[file:Images/principe_mean_shift_3.pdf]]
    #+BEGIN_CENTER
    Move pixel to the barycentre and set value with spectral mean
    #+END_CENTER

*** MeanShift algorithm (4/4)
    #+ATTR_LATEX: :float t :width 0.4\textwidth
    [[file:Images/principe_mean_shift_4.pdf]]
    #+BEGIN_CENTER
    Go back to step 1 (iterative process). Stop after convergence
    #+END_CENTER

    
** Image segmentation and export to GIS                               :guide:
*** Description                                                        :desc:
**** Summary
     
     This exercise allow to get familiar with large scale segmentation using the
     MeanShift algorithm. It goes through each step of the procedure and shows
     how to export and use output segments in a GIS.

**** Pre-requisites
     
     - Install software (Monteverdi and QGIS)
     - Output data from the VHR image pre-processing exercise
     - Know how OTB applications works (see corresponding exercise)
       
**** Goals

     - Know steps required to perform a segmentation
     - Know how to optimize segmentation parameters
     - Know how to export results to a GIS

*** Steps                                                             :steps:
    Data needed for this exercise can be found in folder ~Data/segmentation~.
**** Image smoothing with MeanShift algorithm

     MeanShift algorithm performs a smoothing of the image by preserving
     edges. It gives more homogeneous images and keep also clear frontiers
     between regions. It aims at facilitate the segmentation step done by simple
     methods like connected component computation. The algorithm perform
     iterative mean over pixel using a given neighborhood (spatial and spectral).

     Compute smoothing of image ~phr_orthopxs_osr_mipy_xt.tif~ using the
     application *MeanShiftSmoothing*. Change values /ranger/ and /spatialr/ parameters
     to see their influences.

     Notes:
     - /modesearch/ option allow to speedup computation but it is less
       stable. We will disable it in this exercise.
     - Spatial (/spatialr/) and spectral (/ranger/) radiuses are the most
       important parameters of the algorithm. The first one corresponds to a
       number of pixels and the other one corresponds to a distance between
       pixels spectral values.
     - /foutpos/ output the spectral mean result for each pixels and will be
       used in the next questions.
     - You can use /extended filename/ parameters /box/ to find the optimal
       parameters /ranger/ and /spatialr/ without processing all the input
       image.

       In the next step of the exercise we will use /ranger/ around 254 and
       /spatialr/ around 3 (to limit computation time)

**** Segmentation

     This step allows to produce the initial segmentation using output images
     from the smoothing step (/fout/ and /foutpos/). Adjacent pixels in /fout/
     image  for which spectral distance is lower than /ranger/ and for which
     estimated positions in /foutpos/ is lower than /spatialr/ will be grouped
     in the same connected component (segment).

     This step is computed on a tile basis. The application allows to set the
     tile size with parameters /tilesizex/ and /tilesizey/.

     Finally, /minsize/ allows to remove small regions (threshold corresponds to
     a number of pixels). 

     Use the *LSMSSegmentation* application to perform this step. Some tips
     regarding the application configuration:

     - Use /minsize/ equal to 0 in this first step
     - The output image is a labelled image in which each pixel corresponds to
       an integer value (unique for each segment). It is advisable to encode the
       output image in /uint32/ to have enough unique labels. Indeed the
       segmentation can generate a large number of segments.
     - Parameters /ranger/ and /spatialr/ should have smaller values than in the
       smoothing step. You can start by dividing the value by two.

     Use the /optimal/ mode from the *ColorMapping* application to generate a
     nice output from the labelled image.

**** Handle small regions

     After the initial segmentation, there is generally lots of small regions
     which do not correspond to any objects or region of interest. The
     *LSMSSegmentation* application allows to filter those regions (/minsize/
     parameter), but it is also possible to add a post-processing to fuse
     iterative adjacent regions (using a spectral criteria). This
     post-processing can be done with *LSMSSmallRegionsMerging*.

     Use this application to re-process initial segmentation by fusing all
     regions smaller than 50 pixels.

     Use the /optimal/ mode from the *ColorMapping* application to generate a
     nice output from the labelled image.
     
**** Vectorization
     
     The last step allows to export polygons to a vector file. The
     *LSMSVectorization* application performs the vectorization and compute mean
     and variance on each segment using a support image.

     Start by computing NDVI from input image.

     Then, use the *ConcatenateImages* application to stack input radiometry
     with NDVI (be careful with the encoding of the output image).

     Use the *LSMSVectorization* using this image and the segmentation
     results. You can choose for instance /ESRI Shapefile/ (.shp extension) or
     sqlite (.sqlite extension) as the vector data format (all formats supported
     by GDAL/OGR can be used here).

     Open the input image and the vector layer in QGIS. Adapt the vector
     rendering to display polygon edges in red and the interior ring 100%
     transparent. Analyze the segmentation and comment the result.

     Open and comment the attribute table.
     
**** Filter segments in QGIS
     
     Use the selection tool in QGIS using SQL expression and the layer
     attributes table to select polygons which do not correspond to shadow area
     and copy them in an other layer.

     Use the calculator on attributes to create a new column which will store
     polygon's compacity:
     
     \begin{center}
     $compactness = \frac{\sqrt{area}}{perimeter}$
     \end{center}

     Use the attribute selector interface to select compact polygons with a high
     NDVI value (trees?). Copy the result to a new layer in QGIS. 

** Image segmentation and export to GIS                               :solutions:
*** Image smoothing using the MeanShift algorithm

    Smoothing step:

    #+BEGIN_EXAMPLE
    $ otbcli_MeanShiftSmoothing -in phr_orthopxs_osr_mipy_xt.tif 
      -fout meanshift.tif 
      -foutpos meanshift_pos.tif 
      -ranger 25 
      -spatialr 3 
      -maxiter 10 -modesearch 0 
    #+END_EXAMPLE

    /spatialr/ corresponds to the spatial radius. A higher value will lead to a
    stronger smoothing and will also take more time.

    /ranger/ is the spectral radius which means how pixels in the spatial radius
    and with close radiometry values will be averaged. A higher /ranger/ will
    increase the smoothing effect. 

    /foutpos/ can not be interpreted. It will be used in the next step of the
    exercise. 

*** Segmentation

    Segmentation step can be perform with the following command:

    #+BEGIN_EXAMPLE
    $ otbcli_LSMSSegmentation -in meanshift.tif 
                              -inpos meanshift_pos.tif 
                              -out init_seg.tif uint32
                              -ranger 10  
                              -spatialr 2
    #+END_EXAMPLE
    
    It is pretty hard to interpret directly the output image. It can be
    colorized using the following command:

    #+BEGIN_EXAMPLE
    $ otbcli_ColorMapping -in init_seg.tif 
                          -method optimal 
                          -out init_seg_cm.tif uint8
    #+END_EXAMPLE
    
    This application perform color mapping and the algorithm analyze nearest
    segments to maximize the contrast between polygons.

    The segmented image can then be analyzed. We can see a lot of small regions
    which does not correspond to real objects. There are 2 ways to filtered
    those regions by using the /minsize/ parameter of the *LSMSSegmentation*
    application or by fusing them (next step).

*** Dealing with small regions

    Small regions can be merge with the command:

    #+BEGIN_EXAMPLE
    $ otbcli_LSMSSmallRegionsMerging -in meanshift.tif 
                                     -inseg init_seg.tif 
                                     -out final_seg.tif uint32 
                                     -minsize 100
    #+END_EXAMPLE

    Then, we use again the *ColorMapping* application to colorize the output. 
    
    #+BEGIN_EXAMPLE
    $ otbcli_ColorMapping -in final_seg.tif 
                          -method optimal 
                          -out final_seg_cm.tif uint8
    #+END_EXAMPLE
    
    By comparing both colorized segmentations we can see that regions smaller
    than /minsize/ where fused with adjacent regions close in term of radiometry.

*** Vectorization
    
    Start by computing the NDVI index from the initial image: 

    #+BEGIN_EXAMPLE
    $ otbcli_RadiometricIndices -in phr_orthopxs_osr_mipy_xt.tif 
                                -out phr_ndvi.tif 
                                -list Vegetation:NDVI 
                                -channels.blue 3 
                                -channels.red 1 
                                -channels.green 2 
                                -channels.nir 4 
    #+END_EXAMPLE
    
    Then, concatenate input image and NDVI index

    #+BEGIN_EXAMPLE
    $ otbcli_ConcatenateImages -il phr_orthopxs_osr_mipy_xt.tif phr_ndvi.tif 
                               -out phr_radio_ndvi.tif 
    #+END_EXAMPLE

    Finally, we can perform the vectorization:

    #+BEGIN_EXAMPLE
    $ otbcli_LSMSVectorization -in phr_radio_ndvi.tif 
                               -inseg final_seg.tif -out segmentation.shp
    #+END_EXAMPLE
    
    In QGIS, we can see that for each polygon we've access to the mean and
    variance in each spectral bands (including NDVI). 

***  Polygons filtering in QGIS
    
    To select all segments not in shadow area we are using the expression
    features using the following expression:

    #+BEGIN_EXAMPLE
    meanB0 > 140 or meanB1 > 140 or meanB2 > 140 or meanB3 > 140
    #+END_EXAMPLE

    Then, we use the field calculator to create a new virtual field (real type)
    call /compac/ with the following formula:

    #+BEGIN_EXAMPLE
    sqrt(area($geometry)/perimeter($geometry)
    #+END_EXAMPLE

    Finally, to select small and compact  objects with high NDVI with can use
    the following expression:

    #+BEGIN_EXAMPLE
    compac > 0.1 and nbPixels < 500 and meanB4 > 0.2
    #+END_EXAMPLE
